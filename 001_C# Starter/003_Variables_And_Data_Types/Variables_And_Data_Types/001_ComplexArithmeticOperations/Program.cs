using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace _001_ComplexArithmeticOperations
{
    class Program
    {
        static void Main(string[] args)     // По сути, можно приоритетность операций не учить заново из документации - попробуй и вспомнишь. Главный смысл здесь подвохов, что постфиксные операции, не смотря на их приоритет в списке всех операций в документации, делаются ТОЛЬКО после того, как переменная использована - где бы она не находилась: в команде вывода на экран или в таком, как здесь сложном выражении. Сначала она используется во ВСЁМ выражении, а только после изменяется. Аналогично префиксная операция - сначала срабатывает в любом случае, а потом уже изменённая переменная используется во ВСЁМ выражении.
        {
            // в ручную:

            // int  x = 10, y = 12, z = 3; 

            // x += y - x++ * z;            x = 10 + 12 - 10++ * 3            = -8      // Всё-таки, не смотря на наивысший приоритет операторов постфиксного инкремента/декремента, указанный на MSDN, для постфиксного инкремента/декремента правило: сначала используется переменная, а потом идёт её инкремент/декремент. В примере: сначала идёт умножение х, т.е. операнд х используется до его инкрементирования (т.е. 10) - умножается на 3 - затем судя по всему инкрементируется (11), но остальные арифметические операции с остальными членами выражения выполняются уже с полученным результатом умножения (30) - вычисление полного выражения (-8) - затем запись уже вычисленного результата выражения (-8) в переменную х (он становится -8). Т.е. инкремент как бы "улетает в никуда".
	        // z = --x - y * 5;             z = --10 - 12 * 5                 = -51     // Префиксный же декремент (как и инкремент) применяется ДО использования переменной: сначала х декрементируется до 9, потом 12 умножается на 5, потом используется переменная х, т.е. 9, и идёт операция вычитания: из 9 вычитается полученный результат умножения, т.е. 60. Получается -51.
            // y /= x + 5 % z;              = 1                                         
            // z = x++ + y * 5;             = 70                                        // Описание постфиксного инкремента из MSDN: 1) Возвращает значение x и затем 2) обновляет расположение хранения значением x, которое увеличено на единицу. - иными словами: сначала идёт использование переменной х в выражении, а потом идет ее инкремент.
            // x = y - x++ * z;             = -18                                       // Постфиксный инкремент - та же ситуация. Хотя по МСДН Постфиксный инкремент/ декремент - является Основным оператором и имеет больший приоритет чем префиксный инкремент/ декремент, которые являются Унарными операторами, а те, в свою очередь - имеют больший приориет по сравнению с Мультипликативными операторами - умножение и деление. Потом идут Операторы Сложения. ... Операторы назначения - самые последние.

            // на компьютере:

            int  x = 10, y = 12, z = 3;

            Console.WriteLine(x += y - x++ * z);
            x = 10; y = 12; z = 3;              // принимаем первоначальные значения.
            Console.WriteLine(z = --x - y * 5);
            x = 10; y = 12; z = 3;
            Console.WriteLine(y /= x + 5 % z);
            x = 10; y = 12; z = 3;
            Console.WriteLine(z = x++ + y * 5);
            x = 10; y = 12; z = 3;
            Console.WriteLine(x = y - x++ * z);

            Console.ReadKey();

        }
    }
}
